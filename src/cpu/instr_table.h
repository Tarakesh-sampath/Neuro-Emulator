//src/instr_table
#ifndef INSTR_TABLE_H
#define INSTR_TABLE_H
#include "reg.h"

class CPU;

class InstrTable {
public:
    explicit InstrTable(CPU& cpu);

    // Dispatch instruction by opcode
    void execute(byte opcode);

private:
    CPU& cpu;
    Registers& regs;

    // Instruction implementations
    void instr_NOP();
    void instr_LD_BC_d16();
    void instr_LD_ptrBC_A();
    void instr_INC_B();
    void instr_DEC_B();
    void instr_LD_B_d8();
    void instr_RLCA();
    void instr_LD_ptra16_SP();
    void instr_DEC_BC();
    void instr_ADD_HL_BC();
    void instr_LD_A_ptrBC();
    void instr_INC_BC();
    void instr_INC_C();
    void instr_DEC_C();
    void instr_LD_C_d8();
    void instr_RRCA();
    void instr_STOP();
    void instr_LD_DE_d16(); 
    void instr_LD_ptrDE_A();
    void instr_INC_DE();
    void instr_INC_D();
    void instr_DEC_D();
    void instr_LD_D_d8();
    void instr_RLA();
    void instr_JR_r8();
    void instr_ADD_HL_DE();
    void instr_LD_A_ptrDE();
    void instr_DEC_DE();
    void instr_INC_E();
    void instr_DEC_E();
    void instr_LD_E_d8();
    void instr_RRA();
    void instr_JR_NZ_r8();
    void instr_LD_HL_d16();
    void instr_LD_ptrHLplus_A();
    void instr_INC_HL();
    void instr_INC_H();
    void instr_DEC_H();
    void instr_LD_H_d8();
    void instr_DAA();
    void instr_JR_Z_r8();
    void instr_ADD_HL_HL();
    void instr_LD_A_ptrHLplus();
    void instr_DEC_HL();
    void instr_INC_L();
    void instr_DEC_L();
    void instr_LD_E_d8();
    void instr_XOR_A();
    void instr_JR_NC_r8();
    void instr_LD_SP_d16();
    void instr_LD_HLminus_A();
    void instr_INC_SP();
    void instr_INC_ptrHL();
    void instr_DEC_ptrHL();
    void instr_LD_ptrHL_d8();
    void instr_SCF();
    void instr_JR_C_r8();
    void instr_ADD_HL_SP();
    void instr_LD_A_ptrHLminus();
    void instr_DEC_SP();
    void instr_INC_A();
    void instr_DEC_A();
    void instr_LD_A_d8();
    void instr_CPL();
    void instr_LD_B_B();
    void instr_LD_B_C();
    void instr_LD_B_D();
    void instr_LD_B_E();
    void instr_LD_B_H();
    void instr_LD_B_L();
    void instr_LD_B_ptrHL();
    void instr_LD_B_A();
    void instr_LD_C_B();
    void instr_LD_C_C();
    void instr_LD_C_D();
    void instr_LD_C_E();
    void instr_LD_C_H();
    void instr_LD_C_L();
    void instr_LD_C_ptrHL();
    void instr_LD_C_A();
    void instr_LD_D_B();
    void instr_LD_D_C();
    void instr_LD_D_D();
    void instr_LD_D_E();
    void instr_LD_D_H();
    void instr_LD_D_L();
    void instr_LD_D_ptrHL();
    void instr_LD_D_A();
    void instr_LD_E_B();
    void instr_LD_E_C();
    void instr_LD_E_D();
    void instr_LD_D_H();
    void instr_LD_D_L();
    void instr_LD_D_ptrHL();
    void instr_LD_D_A();
    void instr_LD_E_A();
    void instr_LD_H_B();
    void instr_LD_H_C();
    void instr_LD_H_D();
    void instr_LD_H_E();
    void instr_LD_H_H();
    void instr_LD_H_E();
    void instr_LD_H_ptrHL();
    void instr_LD_H_L();
    void instr_LD_H_A();
    void instr_LD_L_B();
    void instr_LD_L_D();
    void instr_LD_L_E();
    void instr_LD_L_H();
    void instr_LD_L_L();
    void instr_LD_L_ptrHL();
    void instr_LD_L_A();
    void instr_LD_ptrHL_B();
    void instr_LD_ptrHL_C();
    void instr_LD_ptrHL_D();
    void instr_LD_ptrHL_E();
    void instr_LD_ptrHL_H();
    void instr_LD_ptrHL_L();
    void instr_HALT();
    void instr_LD_ptrHL_A();
    void instr_LD_A_B();
    void instr_LD_ptrHL_H();
    void instr_LD_ptrHL_L();
    void instr_HALT();
    void instr_LD_ptrHL_A();
    void instr_LD_A_B();
    void instr_LD_A_ptrHL();
    void instr_LD_A_C();
    void instr_ADD_A_B();
    void instr_ADD_A_C();
    void instr_ADD_A_D();
    void instr_ADD_A_E();
    void instr_ADD_A_H();
    void instr_ADD_A_L();
    void instr_ADD_A_ptrHL();
    void instr_ADD_A_A();
    void instr_ADC_A_B();
    void instr_ADC_A_C();
    void instr_ADC_A_D();
    void instr_ADC_A_E();
    void instr_ADC_A_H();
    void instr_ADC_A_L();
    void instr_ADC_A_ptrHL();
    void instr_ADC_A_A();
    void instr_SUB_B();
    void instr_SUB_C();
    void instr_SUB_D();
    void instr_SUB_E();
    void instr_SUB_H();
    void instr_SUB_L();
    void instr_SUB_ptrHL();
    void instr_SUB_H();
    void instr_SUB_L();
    void instr_SUB_ptrHL();
    void instr_SUB_A();
    void instr_XOR_B();
    void instr_XOR_C();
    void instr_XOR_D();
    void instr_XOR_E();
    void instr_XOR_H();
    void instr_XOR_L();
    void instr_XOR_A();
    void instr_XOR_C();
    void instr_XOR_D();
    void instr_XOR_E();
    void instr_XOR_H();
    void instr_XOR_ptrHL();
    void instr_XOR_A();
    void instr_OR_B();
    void instr_OR_C();
    void instr_OR_D();
    void instr_OR_E();
    void instr_OR_H();
    void instr_OR_L();
    void instr_OR_ptrHL();
    void instr_OR_A();
    void instr_OR_B();
    void instr_OR_C();
    void instr_OR_D();
    void instr_OR_E();
    void instr_OR_H();
    void instr_OR_L();
    void instr_OR_ptrHL();
    void instr_OR_A();
    void instr_CP_B();
    void instr_CP_C();
    void instr_CP_D();
    void instr_CP_E();
    void instr_CP_H();
    void instr_CP_L();
    void instr_CP_ptrHL();
    void instr_CP_A();
    void instr_RET_NZ();
    void instr_POP_BC();
    void instr_JP_NZ_a16();
    void instr_JP_a16();
    void instr_CALL_NZ_a16();
    void instr_PUSH_BC();
    void instr_ADD_A_d8();
    void instr_RST_00H();
    void instr_RET_Z();
    void instr_RET();
    void instr_JP_Z_a16();
    void instr_CB_prefix();
    void instr_CALL_Z_a16();
    void instr_CALL_a16();
    void instr_ADC_A_d8();
    void instr_RST_08H();
    void instr_RET_NC();
    void instr_POP_DE();
    void instr_JP_NC_a16();
    void instr_UNIMPLEMENTED_D3();
    void instr_UNIMPLEMENTED_D4();
    void instr_PUSH_DE();
    void instr_SUB_d8();
    void instr_RST_10H();
    void instr_RET_C();
    void instr_RETI();
    void instr_JP_C_a16();
    void instr_UNIMPLEMENTED_DB();
    void instr_UNIMPLEMENTED_DC();
    void instr_UNIMPLEMENTED_DD();
    void instr_SUB_d8();
    void instr_RST_18H();
    void instr_LD_ptrFF00_d8();
    void instr_POP_HL();
    void instr_UNIMPLEMENTED_DD();
    void instr_SUB_d8();
    void instr_RST_18H();
    void instr_LD_ptrFF00_d8();
    void instr_POP_HL();
    void instr_RST_20H();
    void instr_ADD_SP_r8();
    void instr_JP_HL();
    void instr_LD_a16_A();
    void instr_UNIMPLEMENTED_EB();
    void instr_UNIMPLEMENTED_EC();
    void instr_UNIMPLEMENTED_ED();
    void instr_XOR_d8();
    void instr_RST_28H();
    void instr_LD_A_ptrFF00_C();
    void instr_UNIMPLEMENTED_EC();
    void instr_UNIMPLEMENTED_ED();
    void instr_XOR_d8();
    void instr_RST_28H();
    void instr_LD_A_ptrFF00_C();
    void instr_OR_d8();
    void instr_RST_30H();
    void instr_LD_HL_SP_plus_r8();
    void instr_LD_SP_HL();
    void instr_LD_A_a16();
    void instr_DI();
    void instr_UNIMPLEMENTED_FC();
    void instr_UNIMPLEMENTED_FD();
    void instr_CP_d8();
    void instr_RST_38H();
    // Add more instruction declarations here...
};

#endif // INSTR_TABLE_H