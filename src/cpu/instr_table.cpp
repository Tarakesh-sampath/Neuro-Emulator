//src/instr_table.cpp
#include "instr_table.h"
#include "cpu.h" 
#include <iostream>

InstrTable::InstrTable(CPU& cpu_)
    : cpu(cpu_)
    , regs(cpu.getRegisters()){ 
    
}

void InstrTable::execute(byte opcode) {
    switch (opcode) {
        case 0x00: instr_NOP(); break;
        case 0x01: instr_LD_BC_d16(); break;
        case 0x02: instr_LD_ptrBC_A(); break;
        case 0x03: instr_INC_BC(); break;
        case 0x04: instr_INC_B(); break;
        case 0x05: instr_DEC_B(); break;
        case 0x06: instr_LD_B_d8(); break;
        case 0x07: instr_RLCA(); break;
        case 0x08: instr_LD_ptra16_SP(); break;
        case 0x09: instr_ADD_HL_BC(); break;
        case 0x0A: instr_LD_A_ptrBC(); break;
        case 0x0B: instr_DEC_BC(); break;
        case 0x0C: instr_INC_C(); break;
        case 0x0D: instr_DEC_C(); break;
        case 0x0E: instr_LD_C_d8(); break;
        case 0x0F: instr_RRCA(); break;
        case 0x10: instr_STOP(); break;
        case 0x11: instr_LD_DE_d16(); break;
        case 0x12: instr_LD_ptrDE_A(); break;
        case 0x13: instr_INC_DE(); break;
        case 0x14: instr_INC_D(); break;
        case 0x15: instr_DEC_D(); break;
        case 0x16: instr_LD_D_d8(); break;
        case 0x17: instr_RLA(); break;
        case 0x18: instr_JR_r8(); break;
        case 0x19: instr_ADD_HL_DE(); break;
        case 0x1A: instr_LD_A_ptrDE(); break;
        case 0x1B: instr_DEC_DE(); break;
        case 0x1C: instr_INC_E(); break;
        case 0x1D: instr_DEC_E(); break;
        case 0x1E: instr_LD_E_d8(); break;
        case 0x1F: instr_RRA(); break;
        case 0x20: instr_JR_NZ_r8(); break;
        case 0x21: instr_LD_HL_d16(); break;
        case 0x22: instr_LD_ptrHLplus_A(); break;
        case 0x23: instr_INC_HL(); break;
        case 0x24: instr_INC_H(); break;
        case 0x25: instr_DEC_H(); break;
        case 0x26: instr_LD_H_d8(); break;
        case 0x27: instr_DAA(); break;
        case 0x28: instr_JR_Z_r8(); break;
        case 0x29: instr_ADD_HL_HL(); break;
        case 0x2A: instr_LD_A_ptrHLplus(); break;
        case 0x2B: instr_DEC_HL(); break;
        case 0x2C: instr_INC_L(); break;
        case 0x2D: instr_DEC_L(); break;
        case 0x2E: instr_LD_E_d8(); break;
        case 0x2F: instr_XOR_A(); break;
        case 0x30: instr_JR_NC_r8(); break;
        case 0x31: instr_LD_SP_d16(); break;
        case 0x32: instr_LD_HLminus_A(); break;
        case 0x33: instr_INC_SP(); break;
        case 0x34: instr_INC_ptrHL(); break;
        case 0x35: instr_DEC_ptrHL(); break;
        case 0x36: instr_LD_ptrHL_d8(); break;
        case 0x37: instr_SCF(); break;
        case 0x38: instr_JR_C_r8(); break;
        case 0x39: instr_ADD_HL_SP(); break;
        case 0x3A: instr_LD_A_ptrHLminus(); break;
        case 0x3B: instr_DEC_SP(); break;
        case 0x3C: instr_INC_A(); break;
        case 0x3D: instr_DEC_A(); break;
        case 0x3E: instr_LD_A_d8(); break;
        case 0x3F: instr_CPL(); break;
        case 0x40: instr_LD_B_B(); break;
        case 0x41: instr_LD_B_C(); break;
        case 0x42: instr_LD_B_D(); break;
        case 0x43: instr_LD_B_E(); break;
        case 0x44: instr_LD_B_H(); break;
        case 0x45: instr_LD_B_L(); break;
        case 0x46: instr_LD_B_ptrHL(); break;
        case 0x47: instr_LD_B_A(); break;
        case 0x48: instr_LD_C_B(); break;
        case 0x49: instr_LD_C_C(); break;
        case 0x4A: instr_LD_C_D(); break;
        case 0x4B: instr_LD_C_E(); break;
        case 0x4C: instr_LD_C_H(); break;
        case 0x4D: instr_LD_C_L(); break;
        case 0x4E: instr_LD_C_ptrHL(); break;
        case 0x4F: instr_LD_C_A(); break;
        case 0x50: instr_LD_D_B(); break;
        case 0x51: instr_LD_D_C(); break;
        case 0x52: instr_LD_D_D(); break;
        case 0x53: instr_LD_D_E(); break;
        case 0x54: instr_LD_D_H(); break;
        case 0x55: instr_LD_D_L(); break;
        case 0x56: instr_LD_D_ptrHL(); break;
        case 0x57: instr_LD_D_A(); break;
        case 0x58: instr_LD_E_B(); break;
        case 0x59: instr_LD_E_C(); break;
        case 0x5A: instr_LD_E_D(); break;
        case 0x5B: instr_LD_D_H(); break;
        case 0x5C: instr_LD_D_L(); break;
        case 0x5D: instr_LD_D_ptrHL(); break;
        case 0x5E: instr_LD_D_A(); break;
        case 0x5F: instr_LD_E_A(); break;
        case 0x60: instr_LD_H_B(); break;
        case 0x61: instr_LD_H_C(); break;
        case 0x62: instr_LD_H_D(); break;
        case 0x63: instr_LD_H_E(); break;
        case 0x64: instr_LD_H_H(); break;
        case 0x65: instr_LD_H_E(); break;
        case 0x66: instr_LD_H_ptrHL(); break;
        case 0x67: instr_LD_H_L(); break;
        case 0x68: instr_LD_H_A(); break;
        case 0x69: instr_LD_L_C(); break;
        case 0x6A: instr_LD_L_D(); break;
        case 0x6B: instr_LD_L_E(); break;
        case 0x6C: instr_LD_L_H(); break;
        case 0x6D: instr_LD_L_L(); break;
        case 0x6E: instr_LD_L_ptrHL(); break;
        case 0x6F: instr_LD_L_A(); break;
        case 0x70: instr_LD_ptrHL_B(); break;
        case 0x71: instr_LD_ptrHL_C(); break;
        case 0x72: instr_LD_ptrHL_D(); break;
        case 0x73: instr_LD_ptrHL_E(); break;
        case 0x74: instr_LD_ptrHL_H(); break;
        case 0x75: instr_LD_ptrHL_L(); break;
        case 0x76: instr_HALT(); break;
        case 0x77: instr_LD_ptrHL_A(); break;
        case 0x78: instr_LD_A_B(); break;
        case 0x74: instr_LD_ptrHL_H(); break;
        case 0x75: instr_LD_ptrHL_L(); break;
        case 0x76: instr_HALT(); break;
        case 0x77: instr_LD_ptrHL_A(); break;
        case 0x78: instr_LD_A_B(); break;
        case 0x7E: instr_LD_A_ptrHL(); break;
        case 0x7F: instr_LD_A_A(); break;
        case 0x80: instr_ADD_A_B(); break;
        case 0x81: instr_ADD_A_C(); break;
        case 0x82: instr_ADD_A_D(); break;
        case 0x83: instr_ADD_A_E(); break;
        case 0x84: instr_ADD_A_H(); break;
        case 0x85: instr_ADD_A_L(); break;
        case 0x86: instr_ADD_A_ptrHL(); break;
        case 0x87: instr_ADD_A_A(); break;
        case 0x88: instr_ADC_A_B(); break;
        case 0x89: instr_ADC_A_C(); break;
        case 0x8A: instr_ADC_A_D(); break;
        case 0x8B: instr_ADC_A_E(); break;
        case 0x8C: instr_ADC_A_H(); break;
        case 0x8D: instr_ADC_A_L(); break;
        case 0x8E: instr_ADC_A_ptrHL(); break;
        case 0x8F: instr_ADC_A_A(); break;
        case 0x90: instr_SUB_B(); break;
        case 0x91: instr_SUB_C(); break;
        case 0x92: instr_SUB_D(); break;
        case 0x93: instr_SUB_E(); break;
        case 0x94: instr_SUB_H(); break;
        case 0x95: instr_SUB_L(); break;
        case 0x96: instr_SUB_ptrHL(); break;
        case 0x97: instr_SUB_H(); break;
        case 0x98: instr_SUB_L(); break;
        case 0x99: instr_SUB_ptrHL(); break;
        case 0x9A: instr_SUB_A(); break;
        case 0x9B: instr_XOR_B(); break;
        case 0x9C: instr_XOR_C(); break;
        case 0x9D: instr_XOR_D(); break;
        case 0x9E: instr_XOR_E(); break;
        case 0x9F: instr_XOR_H(); break;
        case 0xA0: instr_XOR_L(); break;
        case 0xA1: instr_XOR_A(); break;
        case 0xA2: instr_XOR_C(); break;
        case 0xA3: instr_XOR_D(); break;
        case 0xA4: instr_XOR_E(); break;
        case 0xA5: instr_XOR_H(); break;
        case 0xA6: instr_XOR_ptrHL(); break;
        case 0xA7: instr_XOR_A(); break;
        case 0xA8: instr_OR_B(); break;
        case 0xA9: instr_OR_C(); break;
        case 0xAA: instr_OR_D(); break;
        case 0xAB: instr_OR_E(); break;
        case 0xAC: instr_OR_H(); break;
        case 0xAD: instr_OR_L(); break;
        case 0xAE: instr_OR_ptrHL(); break;
        case 0xAF: instr_OR_A(); break;
        case 0xB0: instr_OR_B(); break;
        case 0xB1: instr_OR_C(); break;
        case 0xB2: instr_OR_D(); break;
        case 0xB3: instr_OR_E(); break;
        case 0xB4: instr_OR_H(); break;
        case 0xB5: instr_OR_L(); break;
        case 0xB6: instr_OR_ptrHL(); break;
        case 0xB7: instr_OR_A(); break;
        case 0xB8: instr_CP_B(); break;
        case 0xB9: instr_CP_C(); break;
        case 0xBA: instr_CP_D(); break;
        case 0xBB: instr_CP_E(); break;
        case 0xBC: instr_CP_H(); break;
        case 0xBD: instr_CP_L(); break;
        case 0xBE: instr_CP_ptrHL(); break;
        case 0xBF: instr_CP_A(); break;
        case 0xC0: instr_RET_NZ(); break;
        case 0xC1: instr_POP_BC(); break;
        case 0xC2: instr_JP_NZ_a16(); break;
        case 0xC3: instr_JP_a16(); break;
        case 0xC4: instr_CALL_NZ_a16(); break;
        case 0xC5: instr_PUSH_BC(); break;
        case 0xC6: instr_ADD_A_d8(); break;
        case 0xC7: instr_RST_00H(); break;
        case 0xC8: instr_RET_Z(); break;
        case 0xC9: instr_RET(); break;
        case 0xCA: instr_JP_Z_a16(); break;
        case 0xCB: instr_CB_prefix(); break;
        case 0xCC: instr_CALL_Z_a16(); break;
        case 0xCD: instr_CALL_a16(); break;
        case 0xCE: instr_ADC_A_d8(); break;
        case 0xCF: instr_RST_08H(); break;
        case 0xD0: instr_RET_NC(); break;
        case 0xD1: instr_POP_DE(); break;
        case 0xD2: instr_JP_NC_a16(); break;
        case 0xD3: instr_UNIMPLEMENTED_D3(); break; // Illegal / not used
        case 0xD4: instr_UNIMPLEMENTED_D4(); break; // Illegal / not used
        case 0xD5: instr_PUSH_DE(); break;
        case 0xD6: instr_SUB_d8(); break;
        case 0xD7: instr_RST_10H(); break;
        case 0xD8: instr_RET_C(); break;
        case 0xD9: instr_RETI(); break;
        case 0xDA: instr_JP_C_a16(); break;
        case 0xDB: instr_UNIMPLEMENTED_DB(); break;
        case 0xDC: instr_UNIMPLEMENTED_DC(); break;
        case 0xDD: instr_UNIMPLEMENTED_DD(); break;
        case 0xDE: instr_SUB_d8(); break;
        case 0xDF: instr_RST_18H(); break;
        case 0xE0: instr_LD_ptrFF00_d8(); break;
        case 0xE1: instr_POP_HL(); break;
        case 0xDD: instr_UNIMPLEMENTED_DD(); break;
        case 0xDE: instr_SUB_d8(); break;
        case 0xDF: instr_RST_18H(); break;
        case 0xE0: instr_LD_ptrFF00_d8(); break;
        case 0xE1: instr_POP_HL(); break;
        case 0xE7: instr_RST_20H(); break;
        case 0xE8: instr_ADD_SP_r8(); break;
        case 0xE9: instr_JP_HL(); break;
        case 0xEA: instr_LD_a16_A(); break;
        case 0xEB: instr_UNIMPLEMENTED_EB(); break;
        case 0xEC: instr_UNIMPLEMENTED_EC(); break;
        case 0xED: instr_UNIMPLEMENTED_ED(); break;
        case 0xEE: instr_XOR_d8(); break;
        case 0xEF: instr_RST_28H(); break;
        case 0xF0: instr_LD_A_ptrFF00_C(); break;
        case 0xEC: instr_UNIMPLEMENTED_EC(); break;
        case 0xED: instr_UNIMPLEMENTED_ED(); break;
        case 0xEE: instr_XOR_d8(); break;
        case 0xEF: instr_RST_28H(); break;
        case 0xF0: instr_LD_A_ptrFF00_C(); break;
        case 0xF6: instr_OR_d8(); break;
        case 0xF7: instr_RST_30H(); break;
        case 0xF8: instr_LD_HL_SP_plus_r8(); break;
        case 0xF9: instr_LD_SP_HL(); break;
        case 0xFA: instr_LD_A_a16(); break;
        case 0xFB: instr_DI(); break;
        case 0xFC: instr_UNIMPLEMENTED_FC(); break;
        case 0xFD: instr_UNIMPLEMENTED_FD(); break;
        case 0xFE: instr_CP_d8(); break;
        case 0xFF: instr_RST_38H(); break;
        default:
            std::cerr << "Warning: Unimplemented opcode 0x" << std::hex << (int)opcode << ", treating as NOP\n";
            exit(1);
    }
}